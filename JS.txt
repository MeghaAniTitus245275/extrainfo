What is  JavaScript ?
JavaScript is an Interpreted programming and scripting language. 
Easier to code than the compiled languages like C and C++.
Lightweight and most commonly used script in web pages.
Most popular programming language in the world.
Standardized in the ECMA Script language  specification.
The JavaScript language is open source and available free.
JavaScript language runs in the browser.
JavaScript adds interactivity to HTML pages.
Allow client side  user to interact and create dynamic pages.
Client-side means that the JavaScript language runs in the browser.

Where JavaScript is Used ?
Used to create interactive  and dynamic pages.
Used in Web Forms Validations.
Used in Web Applications Development
Used to develop Hybrid Mobile Applications
Used for server side business Service Implementation.
Used to create Windows desktop applications
Used to create cross-platform applications via frameworks.
Used for Inserting and swapping Contents in Web Pages
Used across various platforms and browsers 

Get Started
Writing First JavaScript Code
Variables and Statements
Comments & No Script
Running JavaScript programs
Using  IDE’s for javascript
External JavaScript File
Benefits of using External Files

Writing and Running first JavaScript Program
The script tags and type attribute are required to include JavaScript code in an HTML file.  Include script in body tag in html file run the program.
<html>
<head>
<title>hello</title>
<script type="text/javascript"> 
function callme() {
alert("hello world programming");
  }
</script>
</head>
<body>
<input type="button" name="b" value="Click"  onclick="callme()" />
</body>
</html>

2. Running JavaScript Program
The script tags and type attribute are required to include JavaScript code in an HTML file.  Include script in head tag in html file run the program.
<html>
<head>
<title>hello</title>
<script type="text/javascript"> 
 /*Example statement here */    
  document.write('hello world');
</script>
</head>
<body>
</body>
</html>




3. Running JavaScript Program
1.Using Browser and Text Editor – Enter info in editor and save file as html and then launch in browser. To see the output, double click on file in folder to see output in browser.
<html><head>
<title>My First Javscript program</title> 
<script type="text/javascript"> 
function callme(){
alert("Hello world");  document.write(‘Hello World”); // console.log((‘Hello World”);  }
Function onmouse() { alert(‘on mouse over’);}
}
</script>
</head>
<body>
<button  type="button"  name="Click me"  onClick="callme()">Click Me</button>
<input type=“text” name=“tex”  id=“nam”  size=“30”  onMouseOver=“onmouse()” />
</body>
</html>



4. Running JavaScript Program
We can install IDE’s like webstorm, jsfiddle, sublimetext  etc and run javascript programs.
Follow these steps to run on webstorm
a). Install nodejs software
b) Install webstorm 11.0 and above from jetBrains
c) Choose workspace directory
d) Create new project
e) Choose javaScript option to create javascript file
f) Key in text shown below and save as first.js
   console.log(' Hello World'); 
g) Use run option and choose your program.
h) See Output on console:   Hello World



Local and Global Variables
There are two types of variables: local and global. 

Local variables 
Using the var keyword along with  the variable name is local because it cannot be accessed anywhere outside the scope where we declare it. 
Declaring statement using local variables
var num = 10;
document.write("The value of num is: "+ num);

Global variables 
Declaring the variable without the var keyword, it is accessible throughout the entire script, not only within that function. Which makes it global within script tag.
Declaring statement using global variables
Storing similar values in an array
var colors = new Array("orange", "blue", "red", "brown");
var colors = new Array(); 
colors[0] = "orange"; colors[1] = "blue"; colors[2] = "red"; colors[3] = "brown"; 



Comments & NoScript  Tag

The <noscript> tag is used to show content for users who have disabled scripts in browser or does not supported from browser.
The <noscript> tag can be used in in <head> and <body>.

Using noscript  tag:
<script>document.write(“My First Javascript Programming!")</script><noscript>browser does not support JavaScript!</noscript> 

use comment tag to "hide" scripts from browsers without support for client-side scripts <script>function displayMe() {  alert("My First Javascript Programming!")}</script>  


<!DOCTYPE html>
<html>
<head>
<title>noscript Tag</title>
</head>
<body>
<script type = "text/JavaScript">
document.write("Hello JavaScript commented!")
</script>
 <noscript>
browser does not support JavaScript!
</noscript>
</body>
</html>

External JavaScript File
Syntax for Using External JavaScript File
<script src=“file.js”></script>
Separate javascript file will be created to include in other files.
Use comments to hide JavaScript code from browsers that do not support it
<html>
<head><title>Using External JS file </title>
<script src=“js/external.js"></script>
</head>
<body>
<input type="button" name="b"  value="Click"  onclick="callme()" />
<body>
</html>
//  write this in external.js file
function callme() {
alert('Hello External');
}




Benefits:

External JavaScript files are the most common way to include JavaScript code.
Search engines can crawl and index web site faster if there is less code within HTML page.
Keeping your JavaScript code separate from HTML is cleaner and ultimately easier to manage.
On Including multiple JavaScript files in  HTML code we can separate the JavaScript files into different folder structures on web server. 
Clean, organized code is always key to manage project easily.
JavaScript Client logic and HTML presentation can be managed better.
We can manage development team well with separation of roles


Array.map()
Returns a new array with the results of calling a provided function on every element in this array.

const list = [1, 2, 3, 4];	  	
list.map((el) => el * 2); // [2, 4, 6, 8]

Array.filter()
Returns a new array with all elements that pass the test implemented by the provided function.

const list = [1, 2, 3, 4];
list.filter((el) => el % 2 === 0); // [2, 4]

Array.reduce()
Reduce the array to a single value. The value returned by the function is stored in an accumulator (result/total).

const list = [1, 2, 3, 4, 5];
list.reduceRight((total, item) => total + item, 0); // 15
const list = [1, 2, 3, 4, 5];
list.reduce((total, item) => total + item, 0); // 15

const list = [1, 2, 3, 4, 5];
list.reduceRight((total, item) => total + item, 0); // 15

Array.fill()
Fill the elements in an array with a static value.

const list = [1, 2, 3, 4, 5];
list.fill(0); // [0, 0, 0, 0, 0]

Array.find()
Returns the value of the first element in the array that satisfies the provided testing function. Otherwise undefined is returned.

const list = [1, 2, 3, 4, 5];
list.find((el) => el === 3); // 3
list.find((el) => el === 6); // undefined


Array.indexOf()
Returns the first index at which a given element can be found in the array, or -1 if it is not present.
const list = [1, 2, 3, 4, 5];
list.indexOf(3); // 2
list.indexOf(6); // -1

const list = [1, 2, 3, 4, 5];
list.lastIndexOf(3); // 2
list.lastIndexOf(3, 1); // -1

Returns the index of the first element in the array that satisfies the provided testing function. Otherwise, -1 is returned.
const array = [5, 12, 8, 130, 44];
array.findIndex((element) => element > 13); 

const list = [1, 2, 3, 4, 5];
list.includes(3); // true
list.includes(6); // false

const list = [1, 2, 3, 4, 5];
list.pop(); // 5
list; // [1, 2, 3, 4]


const list = [1, 2, 3, 4, 5];
list.push(6); // 6
list; // [1, 2, 3, 4, 5, 6]

Removes the first element from an array and returns that element.
const list = [1, 2, 3, 4, 5];
list.shift(); // 1
list; // [2, 3, 4, 5]

Adds new elements to the beginning of an array, and returns the new length.
const list = [1, 2, 3, 4, 5];
list.unshift(0); // 6
list; // [0, 1, 2, 3, 4, 5]


Array.splice()
Changes the contents of an array by removing or replacing existing elements and/or adding new elements in place.

const list = [1, 2, 3, 4, 5];
list.splice(1, 2); // [2, 3]
list; // [1, 4, 5]

Array.slice()
Returns a shallow copy of a portion of an array into a new array object selected from beginning to end (end not included). The original array will not be modified.
const list = [1, 2, 3, 4, 5];
list.slice(1, 3); // [2, 3]
list; // [1, 2, 3, 4, 5]













































































































































































































































































































































































































































































































































































</div>

<div class="navcontent">
<div class="nav"><iframe  src="service.html"  name="navframe"  width="100%"  height="100%"> Hello </iframe> </div>
<div class="content"> <iframe  src="home.html"  name="conframe"   style ="width:100%;  height:100%;  scrolling:"no";"  > Hello </iframe> </div>
</div>


<div class="footer"> 
<marquee><h1> Our Website is Up and Running - Advanced Technology Training</h1></marquee>

 <div style="text-align:center;font-size:25px; color:white;">
<a href="first.html" target="conframe" style="text-decoration:none;font-size:1.0em; color:white;">Terms</a>
<a  href="format.html" target="conframe" style="text-decoration:none;font-size:1.0em; color:white;">Privacy</a> 
<a  href="four.html" target="conframe" style="text-decoration:none;font-size:1.0em; color:white;">Policy</a>
<a  href="second.html" target="conframe" style="text-decoration:none;font-size:1.0em; color:white;">Sitemap</a>  
 </div>

</div>

css part


.menu {  float:left; width: 97%;  height: 60px; background-color: orange;  color:white;font-size:30px ;margin-top:0px; }
.menu ul { overflow: hidden; z-index: 1000; position: absolute; }
.menu li a { display: block;color:white;text-align: center;font-size:22px; font-weight:bold;text-decoration: none;  padding: 10px; }
.menu li  { float: left;list-style: none;width: 90px;  color:white;text-align:center;font-size:22px; font-weight:bold; padding: 10px; }



.menu li a:hover  { background-color:pink; }


.menu li ul li a:hover{
background:pink; 
}


Writing and Running first JavaScript Program
The script tags and type attribute are required to include JavaScript code in an HTML file.  Include script in body tag in html file run the program.
        <html>
            <head>
       <title>hello</title>
           <script type="text/javascript"> 
           function callme() {
           alert("hello world programming");
          }
       </script>
          </head>
        <body>
             <input type="button" name="b"  value="Click"  onclick="callme()" />
         </body>
     
</html>



What is  JavaScript ?
JavaScript is an Interpreted programming and scripting language. 
Easier to code than the compiled languages like C and C++.
Lightweight and most commonly used script in web pages.
Most popular programming language in the world.
Standardized in the ECMA Script language  specification.
The JavaScript language is open source and available free.
JavaScript language runs in the browser.
JavaScript adds interactivity to HTML pages.
Allow client side  user to interact and create dynamic pages.
Client-side means that the JavaScript language runs in the browser.

Where JavaScript is Used ?
Used to create interactive  and dynamic pages.
Used in Web Forms Validations.
Used in Web Applications Development
Used to develop Hybrid Mobile Applications
Used for server side business Service Implementation.
Used to create Windows desktop applications
Used to create cross-platform applications via frameworks.
Used for Inserting and swapping Contents in Web Pages
Used across various platforms and browsers 

Get Started
Writing First JavaScript Code
Variables and Statements
Comments & No Script
Running JavaScript programs
Using  IDE’s for javascript
External JavaScript File
Benefits of using External Files

Writing and Running first JavaScript Program
The script tags and type attribute are required to include JavaScript code in an HTML file.  Include script in body tag in html file run the program.
<html>
<head>
<title>hello</title>
<script type="text/javascript"> 
function callme() {
alert("hello world programming");
  }
</script>
</head>
<body>
<input type="button" name="b" value="Click"  onclick="callme()" />
</body>
</html>

2. Running JavaScript Program
The script tags and type attribute are required to include JavaScript code in an HTML file.  Include script in head tag in html file run the program.
<html>
<head>
<title>hello</title>
<script type="text/javascript"> 
 /*Example statement here */    
  document.write('hello world');
</script>
</head>
<body>
</body>
</html>




3. Running JavaScript Program
1.Using Browser and Text Editor – Enter info in editor and save file as html and then launch in browser. To see the output, double click on file in folder to see output in browser.
<html><head>
<title>My First Javscript program</title> 
<script type="text/javascript"> 
function callme(){
alert("Hello world");  document.write(‘Hello World”); // console.log((‘Hello World”);  }
Function onmouse() { alert(‘on mouse over’);}
}
</script>
</head>
<body>
<button  type="button"  name="Click me"  onClick="callme()">Click Me</button>
<input type=“text” name=“tex”  id=“nam”  size=“30”  onMouseOver=“onmouse()” />
</body>
</html>



4. Running JavaScript Program
We can install IDE’s like webstorm, jsfiddle, sublimetext  etc and run javascript programs.
Follow these steps to run on webstorm
a). Install nodejs software
b) Install webstorm 11.0 and above from jetBrains
c) Choose workspace directory
d) Create new project
e) Choose javaScript option to create javascript file
f) Key in text shown below and save as first.js
   console.log(' Hello World'); 
g) Use run option and choose your program.
h) See Output on console:   Hello World



Local and Global Variables
There are two types of variables: local and global. 

Local variables 
Using the var keyword along with  the variable name is local because it cannot be accessed anywhere outside the scope where we declare it. 
Declaring statement using local variables
var num = 10;
document.write("The value of num is: "+ num);

Global variables 
Declaring the variable without the var keyword, it is accessible throughout the entire script, not only within that function. Which makes it global within script tag.
Declaring statement using global variables
Storing similar values in an array
var colors = new Array("orange", "blue", "red", "brown");
var colors = new Array(); 
colors[0] = "orange"; colors[1] = "blue"; colors[2] = "red"; colors[3] = "brown"; 



Comments & NoScript  Tag

The <noscript> tag is used to show content for users who have disabled scripts in browser or does not supported from browser.
The <noscript> tag can be used in in <head> and <body>.

Using noscript  tag:
<script>document.write(“My First Javascript Programming!")</script><noscript>browser does not support JavaScript!</noscript> 

use comment tag to "hide" scripts from browsers without support for client-side scripts <script>function displayMe() {  alert("My First Javascript Programming!")}</script>  


<!DOCTYPE html>
<html>
<head>
<title>noscript Tag</title>
</head>
<body>
<script type = "text/JavaScript">
document.write("Hello JavaScript commented!")
</script>
 <noscript>
browser does not support JavaScript!
</noscript>
</body>
</html>

External JavaScript File
Syntax for Using External JavaScript File
<script src=“file.js”></script>
Separate javascript file will be created to include in other files.
Use comments to hide JavaScript code from browsers that do not support it
<html>
<head><title>Using External JS file </title>
<script src=“js/external.js"></script>
</head>
<body>
<input type="button" name="b"  value="Click"  onclick="callme()" />
<body>
</html>
//  write this in external.js file
function callme() {
alert('Hello External');
}















































































































































































































































































































































































































































































































































































</div>

<div class="navcontent">
<div class="nav"><iframe  src="service.html"  name="navframe"  width="100%"  height="100%"> Hello </iframe> </div>
<div class="content"> <iframe  src="home.html"  name="conframe"   style ="width:100%;  height:100%;  scrolling:"no";"  > Hello </iframe> </div>
</div>


<div class="footer"> 
<marquee><h1> Our Website is Up and Running - Advanced Technology Training</h1></marquee>

 <div style="text-align:center;font-size:25px; color:white;">
<a href="first.html" target="conframe" style="text-decoration:none;font-size:1.0em; color:white;">Terms</a>
<a  href="format.html" target="conframe" style="text-decoration:none;font-size:1.0em; color:white;">Privacy</a> 
<a  href="four.html" target="conframe" style="text-decoration:none;font-size:1.0em; color:white;">Policy</a>
<a  href="second.html" target="conframe" style="text-decoration:none;font-size:1.0em; color:white;">Sitemap</a>  
 </div>

</div>

css part


.menu {  float:left; width: 97%;  height: 60px; background-color: orange;  color:white;font-size:30px ;margin-top:0px; }
.menu ul { overflow: hidden; z-index: 1000; position: absolute; }
.menu li a { display: block;color:white;text-align: center;font-size:22px; font-weight:bold;text-decoration: none;  padding: 10px; }
.menu li  { float: left;list-style: none;width: 90px;  color:white;text-align:center;font-size:22px; font-weight:bold; padding: 10px; }



.menu li a:hover  { background-color:pink; }


.menu li ul li a:hover{
background:pink; 
}


Writing and Running first JavaScript Program
The script tags and type attribute are required to include JavaScript code in an HTML file.  Include script in body tag in html file run the program.
        <html>
            <head>
       <title>hello</title>
           <script type="text/javascript"> 
           function callme() {
           alert("hello world programming");
          }
       </script>
          </head>
        <body>
             <input type="button" name="b"  value="Click"  onclick="callme()" />
         </body>
     
</html>





What is  JavaScript ?
JavaScript is an Interpreted programming and scripting language. 
Easier to code than the compiled languages like C and C++.
Lightweight and most commonly used script in web pages.
Most popular programming language in the world.
Standardized in the ECMA Script language  specification.
The JavaScript language is open source and available free.
JavaScript language runs in the browser.
JavaScript adds interactivity to HTML pages.
Allow client side  user to interact and create dynamic pages.
Client-side means that the JavaScript language runs in the browser.

Where JavaScript is Used ?
Used to create interactive  and dynamic pages.
Used in Web Forms Validations.
Used in Web Applications Development
Used to develop Hybrid Mobile Applications
Used for server side business Service Implementation.
Used to create Windows desktop applications
Used to create cross-platform applications via frameworks.
Used for Inserting and swapping Contents in Web Pages
Used across various platforms and browsers 

Get Started
Writing First JavaScript Code
Variables and Statements
Comments & No Script
Running JavaScript programs
Using  IDE’s for javascript
External JavaScript File
Benefits of using External Files

Writing and Running first JavaScript Program
The script tags and type attribute are required to include JavaScript code in an HTML file.  Include script in body tag in html file run the program.
<html>
<head>
<title>hello</title>
<script type="text/javascript"> 
function callme() {
alert("hello world programming");
  }
</script>
</head>
<body>
<input type="button" name="b" value="Click"  onclick="callme()" />
</body>
</html>

2. Running JavaScript Program
The script tags and type attribute are required to include JavaScript code in an HTML file.  Include script in head tag in html file run the program.
<html>
<head>
<title>hello</title>
<script type="text/javascript"> 
 /*Example statement here */    
  document.write('hello world');
</script>
</head>
<body>
</body>
</html>




3. Running JavaScript Program
1.Using Browser and Text Editor – Enter info in editor and save file as html and then launch in browser. To see the output, double click on file in folder to see output in browser.
<html><head>
<title>My First Javscript program</title> 
<script type="text/javascript"> 
function callme(){
alert("Hello world");  document.write(‘Hello World”); // console.log((‘Hello World”);  }
Function onmouse() { alert(‘on mouse over’);}
}
</script>
</head>
<body>
<button  type="button"  name="Click me"  onClick="callme()">Click Me</button>
<input type=“text” name=“tex”  id=“nam”  size=“30”  onMouseOver=“onmouse()” />
</body>
</html>



4. Running JavaScript Program
We can install IDE’s like webstorm, jsfiddle, sublimetext  etc and run javascript programs.
Follow these steps to run on webstorm
a). Install nodejs software
b) Install webstorm 11.0 and above from jetBrains
c) Choose workspace directory
d) Create new project
e) Choose javaScript option to create javascript file
f) Key in text shown below and save as first.js
   console.log(' Hello World'); 
g) Use run option and choose your program.
h) See Output on console:   Hello World



Local and Global Variables
There are two types of variables: local and global. 

Local variables 
Using the var keyword along with  the variable name is local because it cannot be accessed anywhere outside the scope where we declare it. 
Declaring statement using local variables
var num = 10;
document.write("The value of num is: "+ num);

Global variables 
Declaring the variable without the var keyword, it is accessible throughout the entire script, not only within that function. Which makes it global within script tag.
Declaring statement using global variables
Storing similar values in an array
var colors = new Array("orange", "blue", "red", "brown");
var colors = new Array(); 
colors[0] = "orange"; colors[1] = "blue"; colors[2] = "red"; colors[3] = "brown"; 



Comments & NoScript  Tag

The <noscript> tag is used to show content for users who have disabled scripts in browser or does not supported from browser.
The <noscript> tag can be used in in <head> and <body>.

Using noscript  tag:
<script>document.write(“My First Javascript Programming!")</script><noscript>browser does not support JavaScript!</noscript> 

use comment tag to "hide" scripts from browsers without support for client-side scripts <script>function displayMe() {  alert("My First Javascript Programming!")}</script>  


<!DOCTYPE html>
<html>
<head>
<title>noscript Tag</title>
</head>
<body>
<script type = "text/JavaScript">
document.write("Hello JavaScript commented!")
</script>
 <noscript>
browser does not support JavaScript!
</noscript>
</body>
</html>

External JavaScript File
Syntax for Using External JavaScript File
<script src=“file.js”></script>
Separate javascript file will be created to include in other files.
Use comments to hide JavaScript code from browsers that do not support it
<html>
<head><title>Using External JS file </title>
<script src=“js/external.js"></script>
</head>
<body>
<input type="button" name="b"  value="Click"  onclick="callme()" />
<body>
</html>
//  write this in external.js file
function callme() {
alert('Hello External');
}















































































































































































































































































































































































































































































































































































</div>

<div class="navcontent">
<div class="nav"><iframe  src="service.html"  name="navframe"  width="100%"  height="100%"> Hello </iframe> </div>
<div class="content"> <iframe  src="home.html"  name="conframe"   style ="width:100%;  height:100%;  scrolling:"no";"  > Hello </iframe> </div>
</div>


<div class="footer"> 
<marquee><h1> Our Website is Up and Running - Advanced Technology Training</h1></marquee>

 <div style="text-align:center;font-size:25px; color:white;">
<a href="first.html" target="conframe" style="text-decoration:none;font-size:1.0em; color:white;">Terms</a>
<a  href="format.html" target="conframe" style="text-decoration:none;font-size:1.0em; color:white;">Privacy</a> 
<a  href="four.html" target="conframe" style="text-decoration:none;font-size:1.0em; color:white;">Policy</a>
<a  href="second.html" target="conframe" style="text-decoration:none;font-size:1.0em; color:white;">Sitemap</a>  
 </div>

</div>

css part


.menu {  float:left; width: 97%;  height: 60px; background-color: orange;  color:white;font-size:30px ;margin-top:0px; }
.menu ul { overflow: hidden; z-index: 1000; position: absolute; }
.menu li a { display: block;color:white;text-align: center;font-size:22px; font-weight:bold;text-decoration: none;  padding: 10px; }
.menu li  { float: left;list-style: none;width: 90px;  color:white;text-align:center;font-size:22px; font-weight:bold; padding: 10px; }



.menu li a:hover  { background-color:pink; }


.menu li ul li a:hover{
background:pink; 
}


Writing and Running first JavaScript Program
The script tags and type attribute are required to include JavaScript code in an HTML file.  Include script in body tag in html file run the program.
        <html>
            <head>
       <title>hello</title>
           <script type="text/javascript"> 
           function callme() {
           alert("hello world programming");
          }
       </script>
          </head>
        <body>
             <input type="button" name="b"  value="Click"  onclick="callme()" />
         </body>
     
</html>





What is  JavaScript ?
JavaScript is an Interpreted programming and scripting language. 
Easier to code than the compiled languages like C and C++.
Lightweight and most commonly used script in web pages.
Most popular programming language in the world.
Standardized in the ECMA Script language  specification.
The JavaScript language is open source and available free.
JavaScript language runs in the browser.
JavaScript adds interactivity to HTML pages.
Allow client side  user to interact and create dynamic pages.
Client-side means that the JavaScript language runs in the browser.

Where JavaScript is Used ?
Used to create interactive  and dynamic pages.
Used in Web Forms Validations.
Used in Web Applications Development
Used to develop Hybrid Mobile Applications
Used for server side business Service Implementation.
Used to create Windows desktop applications
Used to create cross-platform applications via frameworks.
Used for Inserting and swapping Contents in Web Pages
Used across various platforms and browsers 

Get Started
Writing First JavaScript Code
Variables and Statements
Comments & No Script
Running JavaScript programs
Using  IDE’s for javascript
External JavaScript File
Benefits of using External Files

Writing and Running first JavaScript Program
The script tags and type attribute are required to include JavaScript code in an HTML file.  Include script in body tag in html file run the program.
<html>
<head>
<title>hello</title>
<script type="text/javascript"> 
function callme() {
alert("hello world programming");
  }
</script>
</head>
<body>
<input type="button" name="b" value="Click"  onclick="callme()" />
</body>
</html>

2. Running JavaScript Program
The script tags and type attribute are required to include JavaScript code in an HTML file.  Include script in head tag in html file run the program.
<html>
<head>
<title>hello</title>
<script type="text/javascript"> 
 /*Example statement here */    
  document.write('hello world');
</script>
</head>
<body>
</body>
</html>




3. Running JavaScript Program
1.Using Browser and Text Editor – Enter info in editor and save file as html and then launch in browser. To see the output, double click on file in folder to see output in browser.
<html><head>
<title>My First Javscript program</title> 
<script type="text/javascript"> 
function callme(){
alert("Hello world");  document.write(‘Hello World”); // console.log((‘Hello World”);  }
Function onmouse() { alert(‘on mouse over’);}
}
</script>
</head>
<body>
<button  type="button"  name="Click me"  onClick="callme()">Click Me</button>
<input type=“text” name=“tex”  id=“nam”  size=“30”  onMouseOver=“onmouse()” />
</body>
</html>



4. Running JavaScript Program
We can install IDE’s like webstorm, jsfiddle, sublimetext  etc and run javascript programs.
Follow these steps to run on webstorm
a). Install nodejs software
b) Install webstorm 11.0 and above from jetBrains
c) Choose workspace directory
d) Create new project
e) Choose javaScript option to create javascript file
f) Key in text shown below and save as first.js
   console.log(' Hello World'); 
g) Use run option and choose your program.
h) See Output on console:   Hello World



Local and Global Variables
There are two types of variables: local and global. 

Local variables 
Using the var keyword along with  the variable name is local because it cannot be accessed anywhere outside the scope where we declare it. 
Declaring statement using local variables
var num = 10;
document.write("The value of num is: "+ num);

Global variables 
Declaring the variable without the var keyword, it is accessible throughout the entire script, not only within that function. Which makes it global within script tag.
Declaring statement using global variables
Storing similar values in an array
var colors = new Array("orange", "blue", "red", "brown");
var colors = new Array(); 
colors[0] = "orange"; colors[1] = "blue"; colors[2] = "red"; colors[3] = "brown"; 



Comments & NoScript  Tag

The <noscript> tag is used to show content for users who have disabled scripts in browser or does not supported from browser.
The <noscript> tag can be used in in <head> and <body>.

Using noscript  tag:
<script>document.write(“My First Javascript Programming!")</script><noscript>browser does not support JavaScript!</noscript> 

use comment tag to "hide" scripts from browsers without support for client-side scripts <script>function displayMe() {  alert("My First Javascript Programming!")}</script>  


<!DOCTYPE html>
<html>
<head>
<title>noscript Tag</title>
</head>
<body>
<script type = "text/JavaScript">
document.write("Hello JavaScript commented!")
</script>
 <noscript>
browser does not support JavaScript!
</noscript>
</body>
</html>

External JavaScript File
Syntax for Using External JavaScript File
<script src=“file.js”></script>
Separate javascript file will be created to include in other files.
Use comments to hide JavaScript code from browsers that do not support it
<html>
<head><title>Using External JS file </title>
<script src=“js/external.js"></script>
</head>
<body>
<input type="button" name="b"  value="Click"  onclick="callme()" />
<body>
</html>
//  write this in external.js file
function callme() {
alert('Hello External');
}



































































































